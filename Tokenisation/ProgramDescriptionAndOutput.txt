<b>Assignment-1 </b>
 
 Tokenisation and Stemming: Information Retrieval CS 6322


Programming_project:  Shiva Podugu   

Program description:

tokenisation.java

The code deals with the process of creating tokens using the Cranfield documents. The path of the location of the Cranfield directory must be given as command line argument.

Please refer readMe file for steps to compile and execute.

Stemmer.java

Purpose: To obtain the root of a given word.
It is the implementation of the Porter stemmer algorithm available in open-source.

Stemmer Reference:
http://chianti.ucsd.edu/svn/csplugins/trunk/soc/layla/WordCloudPlugin/trunk/WordCloud/src/cytoscape/csplugins/wordcloud/Stemmer.java 

Problem 1:
• Please run the program using the steps in readMe file.
• Initially input is to be given during execution.
• To find the time take for the execution, we store the program start time in a variable type long.
• Now, the files are loaded from the Cranfield directory using LoadFiles() method. In this method, the files are loaded and the count of files in the directory is stored in the variable FilesCount. The method uses Scanner for getting path from the console during execution.
• LineSeparator() method is simply used to present the output properly with proper spaces and line separations.

• ReadFilesContent() method : The process of string tokenization starts here by fetching each line of file data using Scanner. Then each line goes to a series of string replacement methods which replaces based on the tokenization constraints. The constraints are converting string to lowercase and replacing non-alpha numeric characters to space and sgml tags to “” and replacing single alphabets except ‘a’ to space and replacing multiple spaces by single space. String Tokenizer splits the string into words using space. tokensCount variable is used to store tokens count.

• Moreover, the tokens are added into a TreeMap called tokens. If the token does not exist in the TreeMap, it is added into it and its count is initialized to 1. Otherwise, its current count is incremented by 1. This operation is performed using the put() and get() methods of TreeMap.

• To iterate through all the tokens, present in the TreeMap an Iterator is used.

• OneOccurence() method: It is called to count the number of tokens that appear only once in the Cranfield Collection The TreeMap is iterated and tokens whose count value is 1, is counted in a variable, OneOccurenceCount.

• DecreasingSort() method: It is called to fetch the 30 most common frequent tokens. This method will compare each token with other tokens in the map. Using a Comparator and order specified, it will return the tokens in a decreasing order.

• The program returns information regarding the count of tokens, unique tokens, tokens that occur only once, average number of tokens per document and 30 most frequent tokens.

• The average number of word tokens per document is tokensCount/FilesCount.

• The average number of word stems per document is stemsCount/FilesCount.

Part2

1) The time taken by program to acquire the text characteristics approximately including stemming: 1705 milli seconds.

2) A. The uppercase and lower case words are changed to lowercase using                     toLowerCase() method.

      B. Dashes between the words are replaced by space.
         Examples:1996-97 is converted to 1996 97
         middle-class is converted to middle class

      C. Apostrophe in possessives are replaced by “”.
         Example: "sheriff's" -> “sheriffs”
                  "university's" -> “universitys”

      D. Dots in acronyms are replaced by “”.
         Example: "U.S." -> “us”
         ”U.N.”  -> “un”

3) Data structures used are

    TreeMap: is Red-Black tree based NavigableMap implementation. It is sorted  
    per the natural ordering of its keys. TreeMap class implements Map interface  
    like HashMap class. Preferred TreeMap due to the natural ordering of 
    its keys.

    Time complexity: O (log n)

Tokens in the TreeMap is converted to a character array and passed to the add() method of Stemmer.java.

Output:

Problem1:

Total number of files in the Cranfield directory are 1400
----------------------------------------------------------------------
StringTokenizing under process...
----------------------------------------------------------------------
----------------------------------------------------------------------
1. Total number of Tokens in the Cranfield text collection: 233241
----------------------------------------------------------------------
2. Total number of unique words in the Cranfield text collection: 10458
----------------------------------------------------------------------
3. The number of words that occur only once in the Cranfield text collection: 4499
----------------------------------------------------------------------
4. The 30 most frequent words in the Cranfield text collection:

1.	the	19450
2.	of	12717
3.	and	6678
4.	a	6245
5.	in	4645
6.	to	4563
7.	is	4114
8.	for	3493
9.	are	2429
10.	with	2265
11.	on	1944
12.	flow	1849
13.	at	1835
14.	by	1755
15.	that	1570
16.	an	1388
17.	be	1271
18.	pressure	1207
19.	boundary	1156
20.	from	1116
21.	as	1114
22.	this	1081
23.	layer	1002
24.	which	975
25.	number	973
26.	results	885
27.	it	856
28.	mach	823
29.	theory	788
30.	shock	712
----------------------------------------------------------------------
5. The average number of word tokens per document: 166
----------------------------------------------------------------------
The time taken by program to acquire the text characteristics approximately: 1763 milli seconds
----------------------------------------------------------------------
----------------------------------------------------------------------

Problem 2:

Stemming under process...

----------------------------------------------------------------------
The number of distinct stems in the Cranfield text collection: 7677
----------------------------------------------------------------------
The number of stems that occur only once in the Cranfield text collection: 3390
----------------------------------------------------------------------
The 30 most frequent stems in the Cranfield text collection: 
1.	the		19450
2.	of		12717
3.	and		6678
4.	a		6245
5.	in		4645
6.	to		4563
7.	is		4114
8.	for		3493
9.	ar		2454
10.	with		2265
11.	on		2262
12.	flow		2080
13.	at		1835
14.	by		1755
15.	that		1570
16.	an		1388
17.	pressur		1382
18.	be		1368
19.	number		1347
20.	boundari		1185
21.	layer		1134
22.	from		1116
23.	as		1114
24.	result		1087
25.	thi		1081
26.	it		1044
27.	effect		996
28.	which		975
29.	method		887
30.	theori		881
----------------------------------------------------------------------
The average number of word stems per document: 166
----------------------------------------------------------------------



